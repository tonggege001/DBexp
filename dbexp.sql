CREATE TABLE USER(
UID int(10) PRIMARY KEY,
NAME varchar(64),
SEX char(4),
BYEAR int,
CITY varchar(64)
);

CREATE TABLE LABEL(
LID int PRIMARY KEY,
LNAME varchar(255)
);


CREATE TABLE MBLOG(
BID int PRIMARY KEY,
TITLE varchar(255),
UID int,
PYEAR int,
PMONTH int,
PDAY int,
CONT varchar(255),
FOREIGN KEY(UID) REFERENCES USER(UID)
);

CREATE TABLE B_L(
BID int,
LID int,
PRIMARY KEY (BID, LID),
FOREIGN KEY(BID) REFERENCES MBLOG(BID),
FOREIGN KEY(LID) REFERENCES LABEL(LID)
);

CREATE TABLE FOLLOW(
UID int,
UIDFLED int ,
PRIMARY KEY(UID, UIDFLED),
FOREIGN KEY(UID) REFERENCES USER(UID),
FOREIGN KEY(UIDFLED) REFERENCES USER(UID),
CHECK(UID <> UIDFLED)
);

CREATE TABLE FRIENDS(
UID int,
FUID int,
PRIMARY KEY(UID, FUID),
FOREIGN KEY(UID) REFERENCES USER(UID),
FOREIGN KEY(FUID) REFERENCES USER(UID),
CHECK(UID <> FUID)
);


CREATE TABLE SUB(
UID int,
LID int,
PRIMARY KEY(UID, LID),
FOREIGN KEY(UID) REFERENCES USER(UID),
FOREIGN KEY(LID) REFERENCES LABEL(LID)
);

CREATE TABLE THUMB(
UID int,
BID int,
PRIMARY KEY(UID, BID),
FOREIGN KEY(UID) REFERENCES USER(UID),
FOREIGN KEY(BID) REFERENCES MBLOG(BID)
);

CREATE TABLE TOPDAY(
TYEAR int,
TMONTH int,
TDAY int,
BID int,
TNO int,
PRIMARY KEY(TYEAR, TMONTH, TDAY),
FOREIGN KEY(BID) REFERENCES MBLOG(BID),
CHECK(TMONTH > 0 AND TMONTH < 13),
CHECK(TDAY > 0 AND TDAY < 32)
);


INSERT INTO USER(UID, NAME, SEX, BYEAR, CITY)
VALUES(1,"张三","男", 1995, "北京");
INSERT INTO USER(UID, NAME, SEX, BYEAR, CITY)
VALUES(2,"徐志摩","男", 1938, "伦敦");
INSERT INTO USER(UID, NAME, SEX, BYEAR, CITY)
VALUES(3,"钱钟书","男", 1935, "北京");
INSERT INTO USER(UID, NAME, SEX, BYEAR, CITY)
VALUES(4,"汪精卫","男", 1923, "武汉");
INSERT INTO USER(UID, NAME, SEX, BYEAR, CITY)
VALUES(5,"林徽因","女", 1928, "北京");
INSERT INTO USER(UID, NAME, SEX, BYEAR, CITY)
VALUES(6,"张爱玲","女", 1924, "北京");
INSERT INTO USER(UID, NAME, SEX, BYEAR, CITY)
VALUES(7,"冰心","女", 1940, "上海");
INSERT INTO USER(UID, NAME, SEX, BYEAR, CITY)
VALUES(8, "鲁迅", "男", 1881, "杭州");
INSERT INTO USER(UID, NAME, SEX, BYEAR, CITY)
VALUES(9, "藤野先生", "男", 1985, "东京");




INSERT INTO LABEL(LID, LNAME)
VALUES(1, "传记");
INSERT INTO LABEL(LID, LNAME)
VALUES(2, "散文");
INSERT INTO LABEL(LID, LNAME)
VALUES(3, "叙事");
INSERT INTO LABEL(LID, LNAME)
VALUES(4, "诗歌");
INSERT INTO LABEL(LID, LNAME)
VALUES(5, "小说");

INSERT INTO MBLOG(BID, TITLE, UID, PYEAR, PMONTH, PDAY, CONT)
VALUES(1,"再别康桥",2,1945,5,1,"轻轻的我走了,正如我轻轻得来,我挥一挥衣袖,不带走一片云彩");
INSERT INTO MBLOG(BID, TITLE, UID, PYEAR, PMONTH, PDAY, CONT)
VALUES(2,"灵魂的自由",2,1945,5,1,"灵魂的自由");
INSERT INTO MBLOG(BID, TITLE, UID, PYEAR, PMONTH, PDAY, CONT)
VALUES(3,"围城",3,1945,5,1,"外面的人想进来,里面的人想出去");

INSERT INTO FRIENDS(UID, FUID) VALUES(2,5),(2,3),(2,6),(2,7);
INSERT INTO FRIENDS(UID,FUID) VALUES(5,2),(5,3),(5,6),(5,7);
INSERT INTO FRIENDS(UID, FUID) VALUES(1,5), VALUES(1,3);





//对博文表增删改操作
INSERT INTO MBLOG(BID, TITLE, UID, PYEAR, PMONTH, PDAY, CONT)
VALUES(10,"开心一刻",1,2013,3,25,"开心一刻");
UPDTAE MBLOG SET CONT="开心一刻2" WHERE BID=10;
DELETE FROM MBLOG WHERE BID=10;

//2.2.1
SELECT * INTO FNAS_3 FROM USER WHERE USER.UID IN(SELECT FOLLOW.UID FROM FOLLOW WHERE FOLLOW.UIDFLED=3)


//2.2.5
CREATE TRIGGER THUMB_OK_T
AFTER INSERT ON THUMB
REFERENCING NEW row AS newTuple
FOR EACH ROW 
BEGIN
    IF(newTuple.UID=(SELECT UID FROM MBLOG WHERE MBLOG.BID = newTuple.BID and MBLOG.UID=newTuple.UID))
	THEN ROLLBACK;
    endIF
END; 



2.3.1
SELECT * FROM USER WHERE USER.UID IN(SELECT FOLLOW.UIDFLED FROM FOLLOW WHERE FOLLOW.UID='张三') ORDER BY USER.BYEAR DESC, USER.UID;

2.3.2
SELECT MBLOG.BID,MBLOG.TITLE, USER.NAME FROM MBLOG,USER WHERE MBLOG.UID = USER.UID AND MBLOG.BID NOT IN (SELECT THUMB.BID FROM THUMB) ORDER BY MBLOG.TITLE;



JOIN //先匹配列名相同的字段再连接,分为从左到右和从右到作
FROM A,B//先A,B作全连接,再塞掉


//2.3.3
SELECT MBLOG.BID FROM MBLOG WHERE MBLOG.UID IN (SELECT USER.UID FROM USER WHERE USER.BYEAR >= 2000) AND MBLOG.BID IN (SELECT TOPDAY.BID FROM TOPDAY) 

//2.3.4(未完成)
SELECT USER.UID FROM B_L WHERE UID


//2.3.5


//2.3.6
SELECT USER.CITY, COUNT(USER.UID) FROM USER GROUP BY USER.CITY

//2.3.7
SELECT USER.CITY,USER.BYEAR,COUNT(USER.UID) FROM USER GROUP BY USER.CITY,USER.BYEAR ORDER BY CITY,BYEAR DESC;

//2.3.8
SELECT THUMB.BID FROM THUMB GROUP BY BID HAVING COUNT(THUMB.BID) > 10;

//2.3.9
SELECT THUMB.BID FROM THUMB WHERE THUMB.UID IN (SELECT USER.UID FROM USER WHERE BYEAR >= 2000) GROUP BY THUMB.BID HAVING COUNT(THUMB.BID) > 10;


//2.3.10
SELECT COUNT(*) FROM TOPDAY WHERE TOPDAY.BID IN(SELECT THUMB.BID FROM THUMB WHERE THUMB.UID IN (SELECT USER.UID FROM USER WHERE BYEAR >= 2000) GROUP BY THUMB.BID HAVING COUNT(THUMB.BID) > 10);


//2.3.11
SELECT DISTINCT SUB.UID FROM SUB LEFT OUTER JOIN LABEL ON(LABEL.LNAME IN ("文学","艺术","哲学","音乐"));

//2.3.12
SELECT MBLOG.CONT FROM MBLOG WHERE MBLOG.TITLE LIKE "%最多地铁站%" AND MBLOG.TITLE LIKE "%_华中科技大学%"

//2.3.13
SELECT FF.UID,FF.FUID  FROM FRIENDS AS FF RIGHT OUTER JOIN FRIENDS AS FD ON(FF.UID=FD.FUID AND FF.FUID=FD.UID);
或者
SELECT FF.UID,FF.FUID FROM FRIENDS AS FF, FRIENDS AS FD WHERE FF.UID=FD.FUID AND FF.FUID=FD.UID;

//2.3.14(未完成)

SELECT FF.UID AS NEW FROM FRIENDS AS FF WHERE NOT EXISTS (SELECT FD.FUID FROM FRIENDS AS FD WHERE FD.UID=5 AND FD.FUID NOT IN (SELECT FS.FUID FROM FRIENDS AS FS WHERE FS.UID=FF.UID));

//2.3.15
(左外连接列出左边关系,即MBLOG)
SELECT MBLOG.BID,MBLOG.TITLE,B_L.LID FROM MBLOG LEFT OUTER JOIN B_L ON(MBLOG.BID=B_L.BID);

//2.3.16
SELECT DISTINCT F1.UID, F2.UID FROM FRIENDS AS F1, FRIENDS AS F2 WHERE (SELECT COUNT(F3.FUID) FROM FRIENDS AS F3, FRIENDS AS F4 WHERE F3.UID=F1.UID AND F4.UID=F2.UID AND F3.FUID =F4.FUID) >= 3 AND F1.UID <> F2.UID;


//2.3.17
CREATE VIEW TOPTENBLOG (BID, TITLE, UID, NAME, THUMBNUM)
AS SELECT MBLOG.BID, MBLOG.TITLE, MBLOG.UID, USER.NAME, COUNT(THUMB.UID) FROM (MBLOG,USER,THUMB) WHERE(
MBLOG.UID=USER.UID AND THUMB.BID=MBLOG.BID AND THUMB.UID=MBLOG.UID AND
 to_days(now()) = to_days(MBLOG.PYEAR*10000+MBLOG.PMONTH*100+MBLOG.PDAY)
) GROUP BY MBLOG.BID,MBLOG.TITLE,MBLOG.UID, USER.NAME ORDER BY COUNT(THUMB.UID) DESC LIMIT 10;


//2.5
DELIMITER $$
CREATE FUNCTION TOPDAYBYID(USERUID INT)
RETURNS INT
BEGIN
    #定义变量
    DECLARE DAYS INT;
    SELECT COUNT(*) INTO DAYS FROM TOPDAY WHERE BID IN (SELECT MBLOG.BID FROM MBLOG WHERE MBLOG.UID= USERUID);
    RETURN DAYS;
END $$
DELIMITER ;


SELECT USER.UID FROM USER WHERE TOPDAYBYID(USER.UID) = 100 AND BYEAR >= 2000;

//2.5.2
CREATE TABLE THUMBTOP(
BID INT,
THUMBNUM INT NOT NULL,
TYEAR INT,
TMONTH INT,
TDAY INT,
PRIMARY KEY(BID, TYEAR,TMONTH, TDAY),
FOREIGN KEY(BID) REFERENCES MBLOG(BID)
)


DELIMITER $$
CREATE PROCEDURE UPDATETHUMBTOP(TTYEAR INT, TTMONTH INT, TTDAY INT)
BEGIN
    DELETE FROM THUMBTOP WHERE TYEAR=TTYEAR AND TMONTH=TTMONTH AND TDAY=TTDAY;
    INSERT INTO THUMBTOP 
        SELECT THUMB.BID,count(*) FROM THUMB,MBLOG WHERE MBLOG.BID=THUMB.BID AND MBLOG.PYEAR = TTYEAR AND MBLOG.PMONTH=TTMONTH AND MBLOG.PDAY = TTDAY GROUP BY THUMB.BID ORDER BY THUMB.BID DESC LIMIT 10;
END
DELIMITER ;





























create table flight_info(
fid int,
ftype varchar(63),
city_from varchar(63),
city_to varchar(63),
time_begin datetime,
time_end datetime,
food bool,
sitenum int NOT NULL,
PRIMARY KEY(fid),
INDEX idx_fid (fid)
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

user_book(book_uid,uid, fid,time,cost,extra)
create table user_book(
bookid int,
book_uid int,
uid int,
fid int,
time datetime,
cost decimal(8,2),
extre varchar(255),
PRIMARY KEY(bookid),
UNIQUE(uid,fid),
FOREIGN KEY(fid) REFERENCES flight_info(fid) ON DELETE SET NULL ON UPDATE CASCADE,
INDEX idx_uid (uid,fid)
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;


flight_site(fid,uid,siteid)
create table flight_site(
fsid int,
fid int,
uid int,
siteid int,
UNIQUE(fid,uid,siteid),
PRIMARY KEY(fsid),
FOREIGN KEY(fid) REFERENCES flight_info(fid) ON DELETE SET NULL ON UPDATE CASCADE,
FOREIGN KEY(uid) REFERENCES user_book(uid) ON DELETE SET NULL ON UPDATE CASCADE,
INDEX idx_fuid(fid,uid,siteid)
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

take_ticket_info(id,uid,fid,time,offtime,extra)
create table take_ticket_info(
id int,
uid int,
fid int,
time datetime,
offtime datetime,
extra varchar(255),
PRIMARY KEY(id),
FOREIGN KEY(uid) REFERENCES user_book(uid) ON DELETE SET NULL ON UPDATE CASCADE,
FOREIGN KEY(fid) REFERENCES flight_info(fid) ON DELETE SET NULL ON UPDATE CASCADE,
INDEX idx_id(id),
INDEX idx_fuid(uid,fid)
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

money_info(uid,fid,money_in, money_out,money,time)
create table money_info(
miid int,
uid int,
fid int,
money_in decimal(8,2),
money_out decimal(8,2),
money decimal(8,2),
time datetime,
UNIQUE(uid,fid),
PRIMARY KEY(miid),
FOREIGN KEY(uid) REFERENCES user_book(uid) ON DELETE SET NULL ON UPDATE CASCADE,
FOREIGN KEY(fid) REFERENCES flight_info(fid) ON DELETE SET NULL ON UPDATE CASCADE,
INDEX idx_fuid(uid,fid)
)ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;














